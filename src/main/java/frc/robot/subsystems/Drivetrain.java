// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Drivetrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private Spark spark0;
private Spark spark1;
private SpeedControllerGroup rightDrive;
private Spark spark2;
private Spark spark3;
private SpeedControllerGroup leftDrive;
private DifferentialDrive drive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public Drivetrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
spark0 = new Spark(0);
 addChild("Spark0",spark0);
 spark0.setInverted(false);

spark1 = new Spark(1);
 addChild("Spark1",spark1);
 spark1.setInverted(true);

rightDrive = new SpeedControllerGroup(spark0, spark1  );
 addChild("RightDrive",rightDrive);
 

spark2 = new Spark(2);
 addChild("Spark2",spark2);
 spark2.setInverted(false);

spark3 = new Spark(3);
 addChild("Spark3",spark3);
 spark3.setInverted(true);

leftDrive = new SpeedControllerGroup(spark2, spark3  );
 addChild("LeftDrive",leftDrive);
//jijijii
//lmoomlmoommoooocow
drive = new DifferentialDrive(rightDrive, leftDrive);
 addChild("Drive",drive);
 drive.setSafetyEnabled(true);
drive.setExpiration(0.1);
drive.setMaxOutput(1.0);



        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    public void driveCommand(double xaxisSpeed, double zaxisRotate) {
        drive.driveCommand(xaxisSpeed, zaxisRotate);
      }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

